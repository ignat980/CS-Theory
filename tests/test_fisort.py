# [10, 6, 18, 13, 16, 0, 7, 3, 11, 15]
# [10] [6, 18, 13, 16, 0, 7, 3, 11, 15] max:10 min:10
# 1st
# [6, 10] [18, 13, 16, 0, 7, 3, 11, 15] max:10 min:6
# < max
# [6, 10, 18] [13, 16, 0, 7, 3, 11, 15] max:18 min:6
# > max
# [6, 10, 13, 18] [16, 0, 7, 3, 11, 15] max:18 min:6
#     ^
# % = 58% , idx = 1.75, sort >
# [6, 10, 13, 16, 18] [0, 7, 3, 11, 15] max:18 min:6
#                 ^
# % = 83.3% , idx = 3.33, sort <
# [0, 6, 10, 13, 16, 18] [7, 3, 11, 15] max:18 min:0
# < min
# [0, 6, 7, 10, 13, 16, 18] [3, 11, 15] max:18 min:0
#           ^
# % = 38.8% , idx = 2.33, sort <
# [0, 3, 6, 7, 10, 13, 16, 18] [11, 15] max:18 min:0
#        ^
# % = 16.6% , idx = 1.16, sort <
# [0, 3, 6, 7, 10, 11, 13, 16, 18] [15] max:18 min:0
#              ^
# % = 61.1% , idx = 4.8, sort >
# [0, 3, 6, 7, 10, 11, 13, 15, 16, 18] max:18 min:0
#                       ^
# % = 83.3% , idx = 7.5, sort >
from algorithms.fisort import fisort
import unittest


class TestSort(unittest.TestCase):

    def test_fisort(self):
        self.assertListEqual(fisort([10, 6, 18, 13, 16, 0, 7, 3, 11, 15]), [0, 3, 6, 7, 10, 11, 13, 15, 16, 18])
        self.assertListEqual(fisort([10, 5, 17, 55, 34, 61, 6, 18]), [5, 6, 10, 17, 18, 34, 55, 61])
        self.assertListEqual(fisort([34, 8, 9, 5, 43, 38, 37, 14, 19, 25, 7, 43, 32, 30, 0, 17, 14, 13, 21, 43]), [0, 5, 7, 8, 9, 13, 14, 14, 17, 19, 21, 25, 30, 32, 34, 37, 38, 43, 43, 43])
        self.assertListEqual(fisort([10, 23, 30, 45, 40, 35, 28, 34, 11, 32, 29, 23, 26, 0, 21, 31, 27, 7, 2, 24]), [0, 2, 7, 10, 11, 21, 23, 23, 24, 26, 27, 28, 29, 30, 31, 32, 34, 35, 40, 45])
        self.assertListEqual(fisort([23, 42, 4, 16, 8, 15]), [4, 8, 15, 16, 23, 42])
        self.assertListEqual(fisort([-2, 1, 3, 18, 20, -28, 0]), [-28, -2, 0, 1, 3, 18, 20])
        self.assertListEqual(fisort([19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0]), [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19])
